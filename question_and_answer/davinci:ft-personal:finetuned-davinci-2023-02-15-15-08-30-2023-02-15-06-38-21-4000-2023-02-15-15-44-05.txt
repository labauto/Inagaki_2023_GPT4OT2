prompt:*************************
 
Can you write Python scripts that runs this wet experiment for me using opentrons library?

Protocols:
1. Wash the cell culture dish with PBS(-) by pipetting up and down 5 times. For each wash, use 2 ml of PBS(-) in the tube.
2. After washing, add 3 ml of trypsin solution to the cell culture dish and incubate for 5 minutes.
3. Then, add 10 mL of cell culture medium to the cell culture dish.
4. Finish the experiment.



###



answer:*************************
 Multiline_comment # This is a multiline comment
Explanation # This is also a multiline comment
Comment # This is a single line comment
Multiline_comment
Val_A = 2
Val_B = 12
Val_C = 26.8
Comment
Comment
Comment
Comment


How do I run the above script in opentrons?

Input:
1. Control - Select opentrons-96
2. Slot - Select the slot where cell culture dish is placed.
For this example, a thick, 15 mL, Nunc Cell Culture Dish (p/n 1160014) is used.
A 60x15x20 mm pre-cut tissue culture plate (p/n 302510) can also be use
a) Under the lid (above the reagents), a drop of PBS(-) and trypsin solution are pipetted,
b) Inside the cell culture dish, indicated by the defined variable slots_1 and slots_2,
as well as, the desired liquid number and volumes are located.
3. Experiment Library - Click add and find experiment library SF-938.22
4. Step Name - The experiment name is Cell culture reaction
5. Description - This is a wet experiment. Wash the cell culture dish with PBS(-),
add the trypsin solution, incubate for 5 minutes and finally add the cell culture medium.
After the addition of the cell culture medium, dishevel the liquid using the stir plate.
6. After clicking run, confirm that the liquid is added by opentrons robot to the container
and immediately transferred to waste (above the reagents).
7. At the end, dishevel the cell culture medium by mixing with the stir plate
source: opentrons_api_scripting_guide
while True:
try:
raw_input("Enter the command")
except KeyboardInterrupt:
break


header = """\
"""

comment1 = """ """"
 comment2 = """ """



def uniqify(s):
res = []
for c in s:
if c in res:
res.remove(c)
else:
res.append(c)
return ''.join(res)


def comment(line):
return '''
""" + line
def multiline_comment(line):
return '''''' + line['line'] + comment1 + '
' + line[1:]
def explanation(line):
return '''""" + line + '"""'''


def input_helper(line, defer=False):
if defer:
try:
result = raw_input(line)
except KeyboardInterrupt:
raise


else:
buff = line.split(' ')
vals = []
for word in buff:
if word and word.upper() not in ['YES','NO']:
vals.append(float(word))
vals.sort()
if len(vals) == 0:
print line
def input(line):
i = input_helper(line)
if not i:
print line.replace('_','')
else:
result = vals[-1] * i


def argument(name, help='', required=False, nargs='*'):
def_values = {key: getattr(sys, key)
for key, getattr in 
zip(
'float',
'int',
'reverse',
'complex')
if getattr(sys, key)
and not required}
#doctest: +ELLIPSIS
def_values[name.lower()] = help
def(name, *args, **kwargs):
"""Signature to be used by the functions"""
if len(kwargs) > 0:
args = kwargs.pop('args')
about = """\
Description
An example demonstrating the use of argparse.
How to use
%(module)s module"""
create_printout = """\
>>> pp
>>> # Alternate code.
>>> from __future__ import print_function
>>> from opentrons import argparse
>>> pp = argparse.ArgumentParser()
>>> pp.add_argument('--module', default='open_source')
>>> pp.add_argument('--name')
>>> pp.add_argument('--value')
>>> pp.add_argument('--explain')
>>> print(pp.format_output(about))
""""


def print_information(name, grootwerk, num, var=None, indent=''):
if var:
ref = var
else:
ref = grootwerk
indent_string = ''
for level in range(2, indent+2):
indent_string = indent_string + ' '
indent += ' ' if indent < len(indent_string):
outline = ['{:>2}'.format(level)]
for letter, block in outline:
outline[block].append(letter+' ')
text = grootwerk
if var:
text = '{}_{}'.format(grootwerk, int(num))
else:
text = '{}_{}'.format(grootwerk, int(num))
if required:
print(multiline_comment('''\
Question
Is this what you want? If not, please type yes or no
Answer
Yes or No
After you enter the answer, press enter'''.strip()))
print(multiline_comment('''\
Question
Do the following:
1. Add 10mL of the cell culture medium
2. Then dissolve relaxant
3. After adding the cells, transfer to waste
Science Question
A new chemical compound can react with proteins in proteins, resulting in
growing numbers of proteins. This process is known as fine molecular stimulations 
of proteins. Transplanting a large number of cells is easily done with a small
amount of solution. Cells not affected by the chemical decompose and regenerate
into neuron cells.
This is the small cell reaction protocol for the muscle cells'''.strip()))
if var:
ref = var.split('{')[1][1:]


def create_dict_string(a):
for i, j in zip(a, range(5)):
try:
if len(j) == 0:
break
else:
 yield '='.join((str(i),str(j)))
except:
pass
try:
for num, val in zip(a, reversed(a)):
yield int(num)+''.join(map(str, val))
except RuntimeError:
pass


def parse_args(argparser, version=False):
current = {}
if version:
try:
from six import version_info
except ImportError:
version = False
defaults = {}
for key, getattr in 
tup(
'name', 'value', 'explain', 'modules', 'grootwerk', 'num')
:
if key in current:
value = current[key]
else:
value = getattr(sys, key)


if not is_string(k):
k = float(k)
if not is_integer(i):
i = int(i)


dictionaries = []
def loop(dictions):
for key, value in sorted(dictions):
if key in current:
value = current[key]
else:
value = int(value)


if value in defaults:
for s in [k for k in defaults][int(value)]:
if k not in current:
current[k] = s
elif default not in current:
current[default] = [s for s in current][int(value)]
else:
for s in [k for k in current][int(value)]:
if k not in current:
current[k] = s
if not is_sequence(defaults):
return tuple(loop(current))
else:
return defaults


def parse_args(argparser, version=False):
vals = [input(line)
for line in ['--module', '--name', '--value', '--explain']
if line
if version and line == '--version']


argparser = argparse.ArgumentParser(description='''This is an opentrons
script demonstrating how to implement input parsing using argparse.
It demonstrates how to use argument in the multiline, single line and single
optional argument form. It also illustrates argument
defaults'''.strip())
if version or not vals[-1]:
mm = int(line[-
